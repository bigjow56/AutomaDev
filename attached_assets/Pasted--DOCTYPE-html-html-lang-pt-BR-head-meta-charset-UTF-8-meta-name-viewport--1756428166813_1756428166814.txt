<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chat - AutomaDev</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Arial', sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 20px;
        }

        .chat-container {
            background: white;
            border-radius: 15px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            width: 100%;
            max-width: 500px;
            height: 600px;
            display: flex;
            flex-direction: column;
            overflow: hidden;
        }

        .chat-header {
            background: linear-gradient(135deg, #FF6B35, #F7931E);
            color: white;
            padding: 20px;
            text-align: center;
            position: relative;
        }

        .chat-header h2 {
            font-size: 1.4em;
            font-weight: bold;
        }

        .chat-header .subtitle {
            font-size: 0.9em;
            opacity: 0.9;
            margin-top: 5px;
        }

        .chat-messages {
            flex: 1;
            padding: 20px;
            overflow-y: auto;
            background: #f8f9fa;
            display: flex;
            flex-direction: column;
            gap: 15px;
        }

        .chat-messages::-webkit-scrollbar {
            width: 6px;
        }

        .chat-messages::-webkit-scrollbar-track {
            background: #f1f1f1;
            border-radius: 3px;
        }

        .chat-messages::-webkit-scrollbar-thumb {
            background: #ccc;
            border-radius: 3px;
        }

        .chat-messages::-webkit-scrollbar-thumb:hover {
            background: #999;
        }

        .message {
            max-width: 80%;
            padding: 12px 16px;
            border-radius: 18px;
            word-wrap: break-word;
            animation: fadeIn 0.3s ease-in;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .message.user {
            background: linear-gradient(135deg, #FF6B35, #F7931E);
            color: white;
            margin-left: auto;
            border-bottom-right-radius: 5px;
        }

        .message.bot {
            background: white;
            color: #333;
            border: 1px solid #e9ecef;
            margin-right: auto;
            border-bottom-left-radius: 5px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.05);
        }

        .message.bot::before {
            content: "ðŸ¤–";
            margin-right: 8px;
        }

        .message-time {
            font-size: 0.75em;
            opacity: 0.7;
            margin-top: 5px;
            display: block;
        }

        .chat-input {
            padding: 20px;
            background: white;
            border-top: 1px solid #e9ecef;
        }

        .input-container {
            display: flex;
            gap: 10px;
            align-items: center;
        }

        #messageInput {
            flex: 1;
            padding: 12px 16px;
            border: 2px solid #e9ecef;
            border-radius: 25px;
            outline: none;
            font-size: 14px;
            transition: border-color 0.3s ease;
        }

        #messageInput:focus {
            border-color: #FF6B35;
        }

        #sendButton {
            background: linear-gradient(135deg, #FF6B35, #F7931E);
            color: white;
            border: none;
            padding: 12px 20px;
            border-radius: 25px;
            cursor: pointer;
            font-weight: bold;
            transition: transform 0.2s ease, box-shadow 0.2s ease;
            min-width: 80px;
        }

        #sendButton:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(255, 107, 53, 0.3);
        }

        #sendButton:disabled {
            background: #ccc;
            cursor: not-allowed;
            transform: none;
            box-shadow: none;
        }

        .typing-indicator {
            display: none;
            align-items: center;
            gap: 8px;
            color: #666;
            font-style: italic;
            margin-bottom: 10px;
        }

        .typing-dots {
            display: flex;
            gap: 3px;
        }

        .typing-dots span {
            width: 6px;
            height: 6px;
            background: #666;
            border-radius: 50%;
            animation: typing 1.4s infinite;
        }

        .typing-dots span:nth-child(2) { animation-delay: 0.2s; }
        .typing-dots span:nth-child(3) { animation-delay: 0.4s; }

        @keyframes typing {
            0%, 60%, 100% { transform: translateY(0); }
            30% { transform: translateY(-10px); }
        }

        .empty-state {
            text-align: center;
            color: #666;
            padding: 40px 20px;
        }

        .empty-state h3 {
            margin-bottom: 10px;
            color: #333;
        }

        @media (max-width: 600px) {
            .chat-container {
                height: 100vh;
                border-radius: 0;
            }
            
            body {
                padding: 0;
            }
        }
    </style>
</head>
<body>
    <div class="chat-container">
        <div class="chat-header">
            <h2>AutomaDev Support</h2>
            <div class="subtitle">Estamos aqui para ajudar!</div>
        </div>
        
        <div class="chat-messages" id="chatMessages">
            <div class="empty-state">
                <h3>ðŸ‘‹ OlÃ¡!</h3>
                <p>Como posso te ajudar hoje?</p>
            </div>
        </div>
        
        <div class="typing-indicator" id="typingIndicator">
            <span>ðŸ¤– Digitando</span>
            <div class="typing-dots">
                <span></span>
                <span></span>
                <span></span>
            </div>
        </div>
        
        <div class="chat-input">
            <form class="input-container" id="chatForm">
                <input 
                    type="text" 
                    id="messageInput" 
                    placeholder="Digite sua mensagem..."
                    autocomplete="off"
                    maxlength="500"
                />
                <button type="submit" id="sendButton">Enviar</button>
            </form>
        </div>
    </div>

    <script>
        class ChatSystem {
            constructor() {
                this.messages = [];
                this.webhookUrl = 'SEU_WEBHOOK_N8N_AQUI'; // Substitua pela sua URL
                this.init();
            }

            init() {
                this.chatMessages = document.getElementById('chatMessages');
                this.messageInput = document.getElementById('messageInput');
                this.sendButton = document.getElementById('sendButton');
                this.chatForm = document.getElementById('chatForm');
                this.typingIndicator = document.getElementById('typingIndicator');

                // Event listeners
                this.chatForm.addEventListener('submit', (e) => this.handleSendMessage(e));
                this.messageInput.addEventListener('keypress', (e) => {
                    if (e.key === 'Enter' && !e.shiftKey) {
                        e.preventDefault();
                        this.handleSendMessage(e);
                    }
                });

                // Carregar mensagens salvas (se houver)
                this.loadMessages();
            }

            handleSendMessage(e) {
                e.preventDefault();
                
                const message = this.messageInput.value.trim();
                if (!message) return;

                // Adicionar mensagem do usuÃ¡rio
                this.addMessage('user', message);
                
                // Limpar input e desabilitar botÃ£o
                this.messageInput.value = '';
                this.sendButton.disabled = true;
                this.sendButton.textContent = 'Enviando...';
                
                // Mostrar indicador de digitaÃ§Ã£o
                this.showTypingIndicator();
                
                // Enviar para o webhook
                this.sendToWebhook(message);
            }

            addMessage(type, text, timestamp = new Date()) {
                const messageData = { type, text, timestamp };
                this.messages.push(messageData);
                
                // Remover estado vazio se for a primeira mensagem
                const emptyState = this.chatMessages.querySelector('.empty-state');
                if (emptyState) {
                    emptyState.remove();
                }
                
                // Criar elemento da mensagem
                const messageElement = document.createElement('div');
                messageElement.className = `message ${type}`;
                messageElement.innerHTML = `
                    ${text}
                    <span class="message-time">${this.formatTime(timestamp)}</span>
                `;
                
                this.chatMessages.appendChild(messageElement);
                this.scrollToBottom();
                
                // Salvar no sessionStorage
                this.saveMessages();
            }

            async sendToWebhook(message) {
                try {
                    const response = await fetch(this.webhookUrl, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            message: message,
                            timestamp: new Date().toISOString(),
                            sessionId: this.getSessionId()
                        })
                    });
                    
                    if (!response.ok) {
                        throw new Error(`HTTP ${response.status}`);
                    }
                    
                    const result = await response.json();
                    
                    // Simular delay de digitaÃ§Ã£o (remover se nÃ£o quiser)
                    await this.delay(1000);
                    
                    this.hideTypingIndicator();
                    
                    // Adicionar resposta do bot
                    const botResponse = result.response || result.message || 'Desculpe, nÃ£o consegui processar sua mensagem.';
                    this.addMessage('bot', botResponse);
                    
                } catch (error) {
                    console.error('Erro ao enviar mensagem:', error);
                    this.hideTypingIndicator();
                    this.addMessage('bot', 'Desculpe, ocorreu um erro. Tente novamente em alguns instantes.');
                } finally {
                    // Reabilitar botÃ£o
                    this.sendButton.disabled = false;
                    this.sendButton.textContent = 'Enviar';
                }
            }

            showTypingIndicator() {
                this.typingIndicator.style.display = 'flex';
                this.scrollToBottom();
            }

            hideTypingIndicator() {
                this.typingIndicator.style.display = 'none';
            }

            scrollToBottom() {
                setTimeout(() => {
                    this.chatMessages.scrollTop = this.chatMessages.scrollHeight;
                }, 100);
            }

            formatTime(date) {
                return date.toLocaleTimeString('pt-BR', { 
                    hour: '2-digit', 
                    minute: '2-digit' 
                });
            }

            getSessionId() {
                let sessionId = sessionStorage.getItem('chatSessionId');
                if (!sessionId) {
                    sessionId = 'session_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
                    sessionStorage.setItem('chatSessionId', sessionId);
                }
                return sessionId;
            }

            saveMessages() {
                sessionStorage.setItem('chatMessages', JSON.stringify(this.messages));
            }

            loadMessages() {
                try {
                    const savedMessages = sessionStorage.getItem('chatMessages');
                    if (savedMessages) {
                        this.messages = JSON.parse(savedMessages);
                        
                        if (this.messages.length > 0) {
                            // Remover estado vazio
                            const emptyState = this.chatMessages.querySelector('.empty-state');
                            if (emptyState) {
                                emptyState.remove();
                            }
                            
                            // Recriar mensagens
                            this.messages.forEach(msg => {
                                const messageElement = document.createElement('div');
                                messageElement.className = `message ${msg.type}`;
                                messageElement.innerHTML = `
                                    ${msg.text}
                                    <span class="message-time">${this.formatTime(new Date(msg.timestamp))}</span>
                                `;
                                this.chatMessages.appendChild(messageElement);
                            });
                            
                            this.scrollToBottom();
                        }
                    }
                } catch (error) {
                    console.error('Erro ao carregar mensagens:', error);
                }
            }

            delay(ms) {
                return new Promise(resolve => setTimeout(resolve, ms));
            }

            // MÃ©todo para limpar o chat (opcional)
            clearChat() {
                this.messages = [];
                this.chatMessages.innerHTML = `
                    <div class="empty-state">
                        <h3>ðŸ‘‹ OlÃ¡!</h3>
                        <p>Como posso te ajudar hoje?</p>
                    </div>
                `;
                sessionStorage.removeItem('chatMessages');
            }
        }

        // Inicializar o chat quando a pÃ¡gina carregar
        document.addEventListener('DOMContentLoaded', () => {
            const chat = new ChatSystem();
            
            // Disponibilizar globalmente para debug (opcional)
            window.chat = chat;
        });
    </script>
</body>
</html>